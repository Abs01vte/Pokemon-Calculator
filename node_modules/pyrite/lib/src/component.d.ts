/// <reference types="mithril" />
import * as m from "mithril";
export declare type Children = m.Children | JSX.Element | null | void;
export interface DefaultAttributes<Attributes> {
    ref?: (component: Component<Attributes>) => void;
    key?: string | number;
}
export declare abstract class Component<Attributes> {
    props: Attributes & DefaultAttributes<Attributes>;
    children: m.Children;
    preventDraw?: boolean;
    decorators: any;
    $onInit(vNode?: m.Vnode<Attributes, any>): any;
    $onCreate(vNode?: m.Vnode<Attributes, any>): any;
    $onBeforeUpdate(vNode?: m.Vnode<Attributes, any>, oldvNode?: m.Vnode<Attributes, any>): any;
    $onUpdate(vNode?: m.Vnode<Attributes, any>): any;
    $onBeforeRemove(vNode?: m.Vnode<Attributes, any>): any;
    $onRemove(vNode?: m.Vnode<Attributes, any>): any;
    constructor(vNode: m.Vnode<Attributes, any>);
    private oninit(vNode);
    private oncreate(vNode);
    private onbeforeupdate(vNode, oldvNode);
    private onupdate(vNode);
    private onbeforeremove(vNode);
    private onremove(vNode);
    private view(vNode);
}
